#!/usr/bin/env bash

# References:
#
# Based on  https://superuser.com/questions/315523/ssh-connection-between-two-behind-nat-computers-through-third-public-ip-computer
#
# This https://stackoverflow.com/questions/14001825/how-to-check-if-a-certain-port-is-open-and-unused
# says nc -z can test if a port is used
#
# need systemd service: https://unix.stackexchange.com/questions/166473/debian-how-to-run-a-script-on-startup-as-soon-as-there-is-an-internet-connecti

set -o errexit
set -o nounset
set -o pipefail
export SHELLOPTS

trap exit INT

function ERR_trap ()
{
    echo "Error exit at line: ${1}, status value: ${2}!"
    exit ${2}
}
set -o errtrace
trap 'ERR_trap ${LINENO} ${?}' ERR


# Kill background process that is created in "connection_setup":
LOCAL_SSH_PID=''
function EXIT_trap ()
{
    if [[ ! -z "${LOCAL_SSH_PID}" ]] ; then
        kill ${LOCAL_SSH_PID}
    fi
}
trap 'EXIT_trap' EXIT


# Directory for 3dpssh config and tracking files.  This is used on
# both the local and 3d party machines.
_3dpssh_dir=.3dps

# First port to use for local connection.
#
# Note that if this port is in use, we search for an unused one one.
# Because this port is on 127.0.0.1 only, this is not likely to
# interfear with anything.
LOCAL_PORT=22222


# Check to see if we have done a setup on the local machine:
if [[ ! -d ${HOME}/${_3dpssh_dir} ]] ; then
    echo -n "It appears that 3dpssh is not configured.  Would you like to configure it now? "
    read answer
    if [[ "${answer}" != 'y' ]] ; then
        echo "Not configuring..."
        exit
    fi

    echo -n "3d party host: "
    read _3dpssh_host
    echo -n "local name: "
    read _3dpssh_local_name

    mkdir -p ${HOME}/${_3dpssh_dir}
    cat <<-EOF > ${HOME}/${_3dpssh_dir}/.config
        _3dpssh_host="${_3dpssh_host}"
        _3dpssh_local_name="${_3dpssh_local_name}"
EOF
fi

source ${HOME}/${_3dpssh_dir}/.config


# Should test for ping?


# this function is evaluated on the 3d party host
eval "
function get_remote_home_and_connection_list_helper ()
{
    local i

    # Create working directory (_3dpssh_dir) if necessary
    if [[ ! -d \${HOME}/${_3dpssh_dir} ]] ; then
        mkdir -p \${HOME}/${_3dpssh_dir}
    fi

    # Prune dead connections
    for i in \${HOME}/${_3dpssh_dir}/* ; do
        if ! grep -q \${i} /proc/net/unix ; then
            rm -f \${i}
        fi
    done

    # Returns two things:
    #    the remote home directory, and
    #    a list of live connections.
    echo \${HOME}
    echo \${HOME}/${_3dpssh_dir}/*
}
"
#declare -f check_3d_party_setup_helper

# get_remote_home_and_connection_list sets the following two global variables:
#    REMOTE_HOME
#    CONNECTION_LIST
function get_remote_home_and_connection_list ()
{
    local list

    list=$( \
            ssh ${_3dpssh_host} \
                "$(declare -f get_remote_home_and_connection_list_helper) ; get_remote_home_and_connection_list_helper" \
        )

    REMOTE_HOME="$(echo "${list}" | head -n 1)"
    CONNECTION_LIST="$(echo "${list}" | tail -n 1)"
}


function check_if_connection_is_available ()
{
    local i found

    found=1
    for i in ${CONNECTION_LIST} ; do
        if [[ "$(basename "${i}")" == "${1}" ]] ; then
            found=0
        fi
    done

    return ${found}
}


function check_3d_party_setup ()
{
    get_remote_home_and_connection_list

    if ! check_if_connection_is_available ${_3dpssh_local_name} ; then
        echo "Backend connection not found, starting it..."

        pkill -f "ssh -fAXN -R " || :
        ssh -fAXN -R ${REMOTE_HOME}/${_3dpssh_dir}/${_3dpssh_local_name}:127.0.0.1:22 ${_3dpssh_host} \
        < /dev/null \
        > /dev/null \
        2> /dev/null


        get_remote_home_and_connection_list

        # if not found after re-start, somethings broken
        if ! check_if_connection_is_available ${_3dpssh_local_name} ; then
            echo "Starting backend connection failed.  Sum Ting Wong"
            exit 1
        fi
    fi
}


function connection_setup ()
{
    local i

    # "nc -z" can be used to test if a port is busy

    # Search for an available port:
    while nc -z 127.0.0.1 ${LOCAL_PORT} ; do
        LOCAL_PORT=$((LOCAL_PORT + 1))
    done

    # --> race condition here on LOCAL_PORT <--

    # Setup forward link
    nohup \
        ssh -AXN -L 127.0.0.1:${LOCAL_PORT}:${REMOTE_HOME}/${_3dpssh_dir}/${1} ${_3dpssh_host} \
        < /dev/null \
        > /dev/null \
        2> /dev/null \
        &
    # --> race condition here on LOCAL_SSH_PID <--
    LOCAL_SSH_PID=${!}

    # Wait for the above connection to complete.  A "spinner".
    # --> potential infinite loop <--
    i=0
    echo -n "Connecting "
    while ! nc -z 127.0.0.1 ${LOCAL_PORT} ; do
        case ${i} in
            ( 0 ) echo -ne '-\b'
            ;;
            ( 1 ) echo -ne '\\\b'
            ;;
            ( 2 ) echo -ne '|\b'
            ;;
            ( 3 ) echo -ne '/\b'
            ;;
            ( * ) echo 'sum ting wong'
            exit 1
            ;;
        esac
        i=$(( (i+1) % 4 ))
        sleep 0.2
    done
    echo -en "\r"

    # Note: the "ssh -AXN -L ..." created in here will be terminated
    # in the EXIT_trap function.
    #
    # Thus a
    #     kill ${local_ssh_pid}
    # is not needed.
}


function list_available_connections ()
{
    local i

    echo -e "Available Connections:"
    for i in ${CONNECTION_LIST} ; do
        echo -e "\t$(basename ${i})"
    done
}


function do_ssh ()
{
    connection_setup ${1}

    ssh \
        -o GlobalKnownHostsFile=/dev/null \
        -o UserKnownHostsFile=/dev/null \
        -o StrictHostKeyChecking=no \
        -p ${LOCAL_PORT} \
        127.0.0.1 \
        || :
}


function do_connection_environment ()
{
    connection_setup ${1}

    echo "For ssh/scp/rsync/sshfs, use \"localhost\" for ${1}."
    echo "You are now in a sub-shell ... ^D to exit"

    export -n SHELLOPTS
    bash --rcfile <(echo \
                        ". ~/.bashrc;" \
                        "PS1=\"[localhost-->${1}] \${PS1}\";" \
                        "alias rsync=\"rsync -e 'ssh -p ${LOCAL_PORT}'\";" \
                        "alias ssh=\"ssh" \
                        "-o GlobalKnownHostsFile=/dev/null" \
                        "-o UserKnownHostsFile=/dev/null" \
                        "-o StrictHostKeyChecking=no" \
                        "-p ${LOCAL_PORT}\";" \
                        "alias sshfs=\"sshfs -p ${LOCAL_PORT}\";" \
                        "alias scp=\"scp -P ${LOCAL_PORT}\"" \
                   ) || :
    export SHELLOPTS

    echo "Dropped connection to \"${1}\""
}


function do_drop_connection ()
{
    pkill -f "ssh -fAXN -R " || :
}



function usage ()
{
    echo "Usage: ${0} -- 3d Party ssh"
    echo "Synopsys:"
    echo "    ${0}                 -- list available connections"
    echo "    ${0} <connection>    -- ssh to \"connection\""
    echo "    ${0} -e <connection> -- drop into an environment for \"connection\""
    echo "    ${0} -x              -- drop backend connection"
}


# No parameters on command line, list connections
if [[ ${#} -eq 0 ]] ; then
    check_3d_party_setup
    list_available_connections

# One parameter, could be command (starts with '-'), could be connection name (no '-')
elif [[ ${#} -eq 1 ]] ; then

    # does this start with '-'?
    if [[ "${1:0:1}" == "-" ]] ; then

        if [[ (${1} == "-h") || (${1} == "--help") ]] ; then
            usage
        elif [[ (${1} == "-x") || (${1} == "--exit") ]] ; then
            do_drop_connection
        else
            usage
        fi

    # does not start with '-'
    else

        check_3d_party_setup

        if check_if_connection_is_available ${1} ; then
            do_ssh ${1}
        else
            echo "Connection \"${1}\" not found."
            list_available_connections
        fi

    fi

# Two parameters.
elif [[ ${#} -eq 2 ]] ; then
    # Only option is "-e <connection>"
    if [[ (${1} == "-e") || (${1} == "--env") ]] ; then

        check_3d_party_setup

        if check_if_connection_is_available ${2} ; then
            do_connection_environment ${2}
        else
            echo "Connection \"${2}\" not found."
            list_available_connections
        fi

    else
        usage
    fi
else
    usage
fi
